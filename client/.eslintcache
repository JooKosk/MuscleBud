[{"/home/joonas/projects/MuscleBud/client/src/index.js":"1","/home/joonas/projects/MuscleBud/client/src/App.js":"2","/home/joonas/projects/MuscleBud/client/src/components/RoutineForm.js":"3","/home/joonas/projects/MuscleBud/client/src/components/PlanInfo.js":"4","/home/joonas/projects/MuscleBud/client/src/components/Navbar.js":"5","/home/joonas/projects/MuscleBud/client/src/components/Plans.js":"6","/home/joonas/projects/MuscleBud/client/src/components/Home.js":"7","/home/joonas/projects/MuscleBud/client/src/services/plans.js":"8","/home/joonas/projects/MuscleBud/client/src/services/workouts.js":"9","/home/joonas/projects/MuscleBud/client/src/services/login.js":"10","/home/joonas/projects/MuscleBud/client/src/components/LoginForm.js":"11","/home/joonas/projects/MuscleBud/client/src/components/Togglable.js":"12","/home/joonas/projects/MuscleBud/client/src/components/RegisterForm.js":"13","/home/joonas/projects/MuscleBud/client/src/services/register.js":"14","/home/joonas/projects/MuscleBud/client/src/components/styling.js":"15","/home/joonas/projects/MuscleBud/client/src/components/Footer.js":"16","/home/joonas/projects/MuscleBud/client/src/components/WorkoutForm.js":"17","/home/joonas/projects/MuscleBud/client/src/components/Alert.js":"18","/home/joonas/projects/MuscleBud/client/src/components/Workout.js":"19"},{"size":142,"mtime":1607603622532,"results":"20","hashOfConfig":"21"},{"size":2351,"mtime":1608137293108,"results":"22","hashOfConfig":"21"},{"size":2096,"mtime":1607605604656,"results":"23","hashOfConfig":"21"},{"size":1256,"mtime":1606568243735,"results":"24","hashOfConfig":"21"},{"size":1205,"mtime":1608043151337,"results":"25","hashOfConfig":"21"},{"size":1371,"mtime":1607537180868,"results":"26","hashOfConfig":"21"},{"size":939,"mtime":1608125539784,"results":"27","hashOfConfig":"21"},{"size":525,"mtime":1607526375481,"results":"28","hashOfConfig":"21"},{"size":764,"mtime":1608134428768,"results":"29","hashOfConfig":"21"},{"size":264,"mtime":1607081345119,"results":"30","hashOfConfig":"21"},{"size":2290,"mtime":1608115922311,"results":"31","hashOfConfig":"21"},{"size":624,"mtime":1607866256798,"results":"32","hashOfConfig":"21"},{"size":2905,"mtime":1608116051571,"results":"33","hashOfConfig":"21"},{"size":207,"mtime":1607081336719,"results":"34","hashOfConfig":"21"},{"size":6968,"mtime":1608116443175,"results":"35","hashOfConfig":"21"},{"size":250,"mtime":1608044213005,"results":"36","hashOfConfig":"21"},{"size":4558,"mtime":1608123620732,"results":"37","hashOfConfig":"21"},{"size":327,"mtime":1608115160451,"results":"38","hashOfConfig":"21"},{"size":2965,"mtime":1608137194516,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1jys68p",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/joonas/projects/MuscleBud/client/src/index.js",[],["82","83"],"/home/joonas/projects/MuscleBud/client/src/App.js",[],"/home/joonas/projects/MuscleBud/client/src/components/RoutineForm.js",[],"/home/joonas/projects/MuscleBud/client/src/components/PlanInfo.js",[],"/home/joonas/projects/MuscleBud/client/src/components/Navbar.js",[],"/home/joonas/projects/MuscleBud/client/src/components/Plans.js",["84"],"import React from 'react'\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Paper,\n} from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport { CenteredContainer } from './styling'\n\nconst Plans = ({ plans }) => {\n  return (\n    <div>\n      <h2>Plans</h2>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">\n                <strong>Plan name</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Author</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Workout type</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Days / week</strong>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {plans.map((p) => (\n              <TableRow key={p.id}>\n                <TableCell>\n                  <Link to={`/plans/${p.id}`}>{p.name}</Link>\n                </TableCell>\n                <TableCell>{p.author}</TableCell>\n                <TableCell>{p.workoutType}</TableCell>\n                <TableCell>{p.workoutDays}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n\nexport default Plans\n","/home/joonas/projects/MuscleBud/client/src/components/Home.js",[],"/home/joonas/projects/MuscleBud/client/src/services/plans.js",[],"/home/joonas/projects/MuscleBud/client/src/services/workouts.js",[],"/home/joonas/projects/MuscleBud/client/src/services/login.js",[],"/home/joonas/projects/MuscleBud/client/src/components/LoginForm.js",[],"/home/joonas/projects/MuscleBud/client/src/components/Togglable.js",[],"/home/joonas/projects/MuscleBud/client/src/components/RegisterForm.js",[],"/home/joonas/projects/MuscleBud/client/src/services/register.js",["85"],"import axios from 'axios'\nconst baseUrl = '/api/users'\n\nexport const register = async (credentials) => {\n  const res = await axios.post(baseUrl, credentials)\n  return res.data\n}\n\nexport default { register }\n","/home/joonas/projects/MuscleBud/client/src/components/styling.js",[],"/home/joonas/projects/MuscleBud/client/src/components/Footer.js",[],"/home/joonas/projects/MuscleBud/client/src/components/WorkoutForm.js",["86","87"],"import React from 'react'\nimport {\n  FormWrapper,\n  CenteredForm,\n  MyTextField,\n  MyBigTextField,\n  MyDateField,\n  MySelect,\n  LoginButton,\n} from './styling'\nimport { create } from '../services/workouts'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\n\nconst validationSchema = yup.object({\n  workoutName: yup.string().required('Workout name is required'),\n  workoutType: yup.string().required('Workout type is required'),\n  startTime: yup.date().required('Start time is required'),\n  endTime: yup.date().required('End time is required'),\n  description: yup.string().max(140),\n})\n\nconst workoutTimeToString = (endTime, startTime) => {\n  let difference = Math.abs(endTime - startTime)\n\n  let ms = difference % 1000\n  difference = (difference - ms) / 1000\n  let s = difference % 60\n  difference = (difference - s) / 60\n  let m = difference % 60\n  difference = (difference - m) / 60\n  let h = difference\n\n  let ss = s <= 9 && s >= 0 ? `0${s}` : s\n  let mm = m <= 9 && m >= 0 ? `0${m}` : m\n  let hh = h <= 9 && h >= 0 ? `0${h}` : h\n\n  return hh + 'h' + ':' + mm + 'min' + ':' + ss + 's'\n}\n\nconst WorkoutForm = () => {\n  const addWorkout = async (values) => {\n    const workoutPlan = {\n      workoutName:\n        values.workoutName.toLowerCase().charAt(0).toUpperCase() +\n        values.workoutName.toLowerCase().slice(1),\n      workoutType: values.workoutType,\n      duration: values.duration,\n      description: values.description,\n    }\n    try {\n      await create(workoutPlan)\n    } catch (e) {\n      //catch error here\n    }\n  }\n  return (\n    <FormWrapper>\n      <Formik\n        initialValues={{\n          workoutName: '',\n          workoutType: 'Running',\n          startTime: '',\n          endTime: '',\n          description: '',\n          duration: '',\n        }}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          console.log('submitting', values)\n          let startTime = new Date(values.endTime).getTime()\n          let endTime = new Date(values.startTime).getTime()\n          values.duration = workoutTimeToString(endTime, startTime)\n          addWorkout(values)\n          resetForm()\n          setSubmitting(false)\n        }}\n        validationSchema={validationSchema}\n      >\n        {(props) => {\n          const { isSubmitting, handleSubmit } = props\n          return (\n            <CenteredForm onSubmit={handleSubmit}>\n              <MyTextField\n                label=\"Name your workout\"\n                name=\"workoutName\"\n                type=\"text\"\n              />\n              <MySelect\n                options={[\n                  {\n                    content: 'Running',\n                    id: 1,\n                  },\n                  {\n                    content: 'Gym',\n                    id: 2,\n                  },\n                  {\n                    content: 'Cycling',\n                    id: 3,\n                  },\n                ]}\n                label=\"Workout type\"\n                name=\"workoutType\"\n                type=\"select\"\n              />\n              <MyDateField\n                label=\"Start time\"\n                name=\"startTime\"\n                type=\"datetime-local\"\n              />\n              <MyDateField\n                label=\"End time\"\n                name=\"endTime\"\n                type=\"datetime-local\"\n              />\n              <MyBigTextField\n                label=\"Workout notes\"\n                name=\"description\"\n                type=\"text\"\n              />\n              <LoginButton disabled={isSubmitting} type=\"submit\">\n                Submit workout\n              </LoginButton>\n            </CenteredForm>\n          )\n        }}\n      </Formik>\n    </FormWrapper>\n  )\n}\n\nexport default WorkoutForm\n\n/*\n<MySelect\n                options={[\n                  {\n                    content: 'Motivated',\n                    id: 1,\n                  },\n                  {\n                    content: 'Delighted',\n                    id: 2,\n                  },\n                  {\n                    content: 'Sad',\n                    id: 3,\n                  },\n                  {\n                    content: 'Disappointed',\n                    id: 4,\n                  },\n                  {\n                    content: 'Hopeful',\n                    id: 5,\n                  },\n                  {\n                    content: 'Happy',\n                    id: 6,\n                  },\n                ]}\n                label=\"Workout mood\"\n                name=\"mood\"\n                type=\"select\"\n              />\n              */\n","/home/joonas/projects/MuscleBud/client/src/components/Alert.js",[],"/home/joonas/projects/MuscleBud/client/src/components/Workout.js",["88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":12,"column":10,"nodeType":"95","messageId":"96","endLine":12,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":9,"column":1,"nodeType":"99","endLine":9,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":38,"column":19,"nodeType":"102","messageId":"103","endLine":38,"endColumn":20},{"ruleId":"100","severity":1,"message":"101","line":38,"column":38,"nodeType":"102","messageId":"103","endLine":38,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":23,"column":6,"nodeType":"106","endLine":23,"endColumn":8,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'CenteredContainer' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'likedBy' and 'workout.whoLiked'. Either include them or remove the dependency array. You can also do a functional update 'setLikedBy(l => ...)' if you only need 'likedBy' in the 'setLikedBy' call.","ArrayExpression",["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [likedBy, workout.whoLiked]",{"range":"113","text":"114"},[562,564],"[likedBy, workout.whoLiked]"]